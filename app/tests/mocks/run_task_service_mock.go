// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/task_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "bootstrap/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTaskUsecase is a mock of TaskUsecase interface.
type MockTaskUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTaskUsecaseMockRecorder
}

// MockTaskUsecaseMockRecorder is the mock recorder for MockTaskUsecase.
type MockTaskUsecaseMockRecorder struct {
	mock *MockTaskUsecase
}

// NewMockTaskUsecase creates a new mock instance.
func NewMockTaskUsecase(ctrl *gomock.Controller) *MockTaskUsecase {
	mock := &MockTaskUsecase{ctrl: ctrl}
	mock.recorder = &MockTaskUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskUsecase) EXPECT() *MockTaskUsecaseMockRecorder {
	return m.recorder
}

// Task mocks base method.
func (m *MockTaskUsecase) Task(taskInterface domain.TaskDomainInterface) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Task", taskInterface)
	ret0, _ := ret[0].(string)
	return ret0
}

// Task indicates an expected call of Task.
func (mr *MockTaskUsecaseMockRecorder) Task(taskInterface interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Task", reflect.TypeOf((*MockTaskUsecase)(nil).Task), taskInterface)
}
